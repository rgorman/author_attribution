sWord_classifier$tables[5]
sWord_predictions <- predict(sWord_classifier, testing.data)
library (gmodels)
install.packages("gmodels")
library (gmodels)
CrossTable(sWord_predictions, testing.classes)
Ct <- CrossTable(sWord_predictions, testing.classes)
write.csv(Ct, file="sWord_output/ct.cvs")
write.csv(Ct, file="sWord_output/ct.csv")
sWord_predictions
testing.classes
sWord_predictions <- predict(sWord_classifier, testing.data, type = c("class", "raw"))
sWord_predictions
sWord_predictions <- predict(sWord_classifier, testing.data, type = "raw")
sWord_predictions
sWord_predictions <- predict(sWord_classifier, testing.data)
sWord_predictions
testing.classes
table(sWord_predictions, testing.classes)
results_table <- table(sWord_predictions, testing.classes)
write.csv (results.table, file="sWord_output/results_table.csv")
write.csv (results.table, file="sWord_output/results_table.csv")
write.csv (results_table, file="sWord_output/results_table.csv")
sWord_predictions
es
testing.classes
CrossTable(sWord_predictions)
testing.classes
CrossTable(sWord_predictions, testing.classes, max.width=2)
CrossTable(sWord_predictions, testing.classes, max.width=1)
table(Predictions=sWord_predictions, TrueLabels=testing.classes)
sWord_predictions_raw <- predict(sWord_classifier, testing.data, type = "raw")
write.csv (sWord_predictions_raw, file="sWord_output/results_table_raw.csv")
testing.classes
sWord_predictions
testing.classes
testing.index
testing.index.v
testing.index.v[21]
testing.index.v[27]
dim(smaller.df)
table(Predictions=sWord_predictions, TrueLabels=testing.classes)
results_table <- table(Predictions=sWord_predictions, TrueLabels=testing.classes)
write.csv (results_table, file="sWord_output/results_table.csv")
write.csv (results_table, file="sWord_output/results_table.csv")
results_table
install.packages("klaR")
library(klaR)
errormatrix(testing.classes, sWord_predictions)
errormatrix(testing.classes, sWord_predictions, relative = T)
errormatrix(testing.classes, sWord_predictions)
error.m <-errormatrix(testing.classes, sWord_predictions)
write.csv (error.m, file="sWord_output/error_matrix.csv")
write.csv (error.m, file="sWord_output/error_matrix.csv")
results_table <- table(sWord_predictions, testing.classes)
results_table
results_table2 <- rbind(results_table, results_table)
results_table2
results_table2 <- rbind(results_table, results_table, deparse.level=1)
results_table2
results_table2 <- rbind(results_table, results_table[, 1:6], deparse.level=1)
results_table2 <- rbind(results_table, results_table[, 1:6], deparse.level=1)
error.m2 <- rbind(error.m, error.m)
error.m2
sWord_predictions
matrix(nrow=1, ncol=18)
matrix(nrow=1, ncol=18) -> m
rbind(m, sWord_predictions)
rbind(m, sWord_predictions)
as.matrix(sWord_predictions)
as.matrix(sWord_predictions, nrow=1)
sWord_predictions
m <- rbind (sWord_predictions, sWord_predictions)
m
m <- list()
m[[1]]<- sWord_predictions
m[[2]]<- sWord_predictions
m[[1]]
m[[2]]
errormatrix(testing.classes, m[[2]])
testing.index.v
ind.t <- rbind(testing.index.v, testing.index.v)
ind.t
str (testing.index.v)
str (ind.t)
summary (ind.t)
str(ind.t)
class(ind.t)
ind.t[2,2]
ind.t[1,1]
c(testing.index.v, testing.index.v)
c(testing.index.v, testing.index.v) -> m
matrix (m, colnum=28)
matrix (m, ncol=28)
matrix (m, ncol=28, byrow=T)
testing.classes.l() <- list()
testing.classes.l <- list()
testing.classes.l <- list()
sWord_predictions.l <- list()
sWord_predictions_raw.l <- list()
index.record.v <- NULL
testing.classes.v <-NULL
sWord.predictions.v <-NULL
for (i in 1:3) {
#create vector of random integers = 10% of obs in smaller.df
testing.index.v <- sample (seq (1, nrow(smaller.df)), 28)
#create training and testing data matrices using testing.index.v and its inverse
testing.data <- smaller.df[testing.index.v, ]
training.data <- smaller.df[-testing.index.v, ]
#create vectors of factors giving classes (here = authors) of each row in testing.data and training.data
training.classes <- as.factor(author.v[-testing.index.v])
testing.classes <- as.factor(author.v[testing.index.v])
#train the algorithm using training.data and training classes
sWord_classifier <- naiveBayes(training.data, training.classes)
# test the algorithm by using sWord_classifier to predict() the testing.data
sWord_predictions.l[[i]] <- predict(sWord_classifier, testing.data)
# make a file of the raw probabilities
sWord_predictions_raw.l[[i]] <- predict(sWord_classifier, testing.data, type = "raw")
#make record of index vectors so we can identify the particular chunks
index.record.v <- c(index.record.v, training.index.v )
#make record of testing_classes
testing.classes.l[[i]] <-testing.classes
#make vector of testing.classes for input to errormatrix()
testing.classes.v <-c(testing.classes.v, testing.classes)
#make vector of sWord.predictions for input to errormatrix()
sWord.predictions.v <- c(sWord.predictions.v, sWord.predictions)
}
index.record.v <- c(index.record.v, training.index.v )
testing.classes.l <- list()
sWord_predictions.l <- list()
sWord_predictions_raw.l <- list()
index.record.v <- NULL
testing.classes.v <-NULL
sWord.predictions.v <-NULL
for (i in 1:3) {
#create vector of random integers = 10% of obs in smaller.df
testing.index.v <- sample (seq (1, nrow(smaller.df)), 28)
#create training and testing data matrices using testing.index.v and its inverse
testing.data <- smaller.df[testing.index.v, ]
training.data <- smaller.df[-testing.index.v, ]
#create vectors of factors giving classes (here = authors) of each row in testing.data and training.data
training.classes <- as.factor(author.v[-testing.index.v])
testing.classes <- as.factor(author.v[testing.index.v])
#train the algorithm using training.data and training classes
sWord_classifier <- naiveBayes(training.data, training.classes)
# test the algorithm by using sWord_classifier to predict() the testing.data
sWord_predictions.l[[i]] <- predict(sWord_classifier, testing.data)
# make a file of the raw probabilities
sWord_predictions_raw.l[[i]] <- predict(sWord_classifier, testing.data, type = "raw")
#make record of index vectors so we can identify the particular chunks
index.record.v <- c(index.record.v, testing.index.v )
#make record of testing_classes
testing.classes.l[[i]] <-testing.classes
#make vector of testing.classes for input to errormatrix()
testing.classes.v <-c(testing.classes.v, testing.classes)
#make vector of sWord.predictions for input to errormatrix()
sWord.predictions.v <- c(sWord.predictions.v, sWord.predictions)
}
testing.classes.l <- list()
sWord_predictions.l <- list()
sWord_predictions_raw.l <- list()
index.record.v <- NULL
testing.classes.v <-NULL
sWord.predictions.v <-NULL
for (i in i:3) {
#create vector of random integers = 10% of obs in smaller.df
testing.index.v <- sample (seq (1, nrow(smaller.df)), 28)
#create training and testing data matrices using testing.index.v and its inverse
testing.data <- smaller.df[testing.index.v, ]
training.data <- smaller.df[-testing.index.v, ]
#create vectors of factors giving classes (here = authors) of each row in testing.data and training.data
training.classes <- as.factor(author.v[-testing.index.v])
testing.classes <- as.factor(author.v[testing.index.v])
#train the algorithm using training.data and training classes
sWord_classifier <- naiveBayes(training.data, training.classes)
# test the algorithm by using sWord_classifier to predict() the testing.data
sWord_predictions.l[[i]] <- predict(sWord_classifier, testing.data)
# make a file of the raw probabilities
sWord_predictions_raw.l[[i]] <- predict(sWord_classifier, testing.data, type = "raw")
#make record of index vectors so we can identify the particular chunks
index.record.v <- c(index.record.v, testing.index.v )
#make record of testing_classes
testing.classes.l[[i]] <-testing.classes
#make vector of testing.classes for input to errormatrix()
testing.classes.v <-c(testing.classes.v, testing.classes)
#make vector of sWord.predictions for input to errormatrix()
sWord.predictions.v <- c(sWord.predictions.v, sWord.predictions)
}
sWord.predictions.v <- c(sWord.predictions.v, sWord.predictions)
sWord.predictions.v <- c(sWord.predictions.v, sWord.predictions.l[[i]])
sWord_predictions.l[[i]] <- predict(sWord_classifier, testing.data)
sWord.predictions.v <- c(sWord.predictions.v, sWord.predictions.l[[i]])
sWord_predictions <- predict(sWord_classifier, testing.data)
sWord_predictions.l[[i]] <- sWord_predictions
testing.classes.l <- list()
sWord_predictions.l <- list()
sWord_predictions_raw.l <- list()
index.record.v <- NULL
testing.classes.v <-NULL
sWord.predictions.v <-NULL
testing.index.v <- sample (seq (1, nrow(smaller.df)), 28)
testing.data <- smaller.df[testing.index.v, ]
training.data <- smaller.df[-testing.index.v, ]
training.classes <- as.factor(author.v[-testing.index.v])
testing.classes <- as.factor(author.v[testing.index.v])
testing.classes.l <- list()
sWord_predictions.l <- list()
sWord_predictions_raw.l <- list()
index.record.v <- NULL
testing.classes.v <-NULL
sWord.predictions.v <-NULL
testing.index.v <- sample (seq (1, nrow(smaller.df)), 28)
testing.data <- smaller.df[testing.index.v, ]
training.data <- smaller.df[-testing.index.v, ]
training.classes <- as.factor(author.v[-testing.index.v])
testing.classes <- as.factor(author.v[testing.index.v])
sWord_classifier <- naiveBayes(training.data, training.classes)
sWord_predictions <- predict(sWord_classifier, testing.data)
sWord_predictions.l[[1]] <- sWord_predictions
sWord_predictions_raw.l[[1]] <- predict(sWord_classifier, testing.data, type = "raw")
index.record.v <- c(index.record.v, testing.index.v )
testing.classes.l[[1]] <-testing.classes
testing.classes.l <- list()
sWord_predictions.l <- list()
sWord_predictions_raw.l <- list()
index.record.v <- NULL
testing.classes.v <-NULL
sWord.predictions.v <-NULL
for (i in i:3) {
#create vector of random integers = 10% of obs in smaller.df
testing.index.v <- sample (seq (1, nrow(smaller.df)), 28)
#create training and testing data matrices using testing.index.v and its inverse
testing.data <- smaller.df[testing.index.v, ]
training.data <- smaller.df[-testing.index.v, ]
#create vectors of factors giving classes (here = authors) of each row in testing.data and training.data
training.classes <- as.factor(author.v[-testing.index.v])
testing.classes <- as.factor(author.v[testing.index.v])
#train the algorithm using training.data and training classes
sWord_classifier <- naiveBayes(training.data, training.classes)
# test the algorithm by using sWord_classifier to predict() the testing.data
sWord_predictions <- predict(sWord_classifier, testing.data)
sWord_predictions.l[[i]] <- sWord_predictions
# make a file of the raw probabilities
sWord_predictions_raw.l[[i]] <- predict(sWord_classifier, testing.data, type = "raw")
#make record of index vectors so we can identify the particular chunks
index.record.v <- append(index.record.v, testing.index.v)
#make record of testing_classes
testing.classes.l[[i]] <-testing.classes
#make vector of testing.classes for input to errormatrix()
testing.classes.v <-append(testing.classes.v, testing.classes)
#make vector of sWord.predictions for input to errormatrix()
sWord.predictions.v <- append(sWord.predictions.v, sWord.predictions.l[[i]])
}
testing.classes.l <- list()
sWord_predictions.l <- list()
sWord_predictions_raw.l <- list()
index.record.v <- NULL
testing.classes.v <-NULL
sWord.predictions.v <-NULL
testing.classes.l <- list()
sWord_predictions.l <- list()
sWord_predictions_raw.l <- list()
index.record.v <- NULL
testing.classes.v <-NULL
sWord.predictions.v <-NULL
for (i in i:3) {
#create vector of random integers = 10% of obs in smaller.df
testing.index.v <- sample (seq (1, nrow(smaller.df)), 28)
#create training and testing data matrices using testing.index.v and its inverse
testing.data <- smaller.df[testing.index.v, ]
training.data <- smaller.df[-testing.index.v, ]
#create vectors of factors giving classes (here = authors) of each row in testing.data and training.data
training.classes <- as.factor(author.v[-testing.index.v])
testing.classes <- as.factor(author.v[testing.index.v])
#train the algorithm using training.data and training classes
sWord_classifier <- naiveBayes(training.data, training.classes)
# test the algorithm by using sWord_classifier to predict() the testing.data
sWord_predictions <- predict(sWord_classifier, testing.data)
sWord_predictions.l[[i]] <- sWord_predictions
# make a file of the raw probabilities
sWord_predictions_raw.l[[i]] <- predict(sWord_classifier, testing.data, type = "raw")
#make record of index vectors so we can identify the particular chunks
index.record.v <- append(index.record.v, testing.index.v)
#make record of testing_classes
testing.classes.l[[i]] <-testing.classes
#make vector of testing.classes for input to errormatrix()
testing.classes.v <-append(testing.classes.v, testing.classes)
#make vector of sWord.predictions for input to errormatrix()
sWord.predictions.v <- append(sWord.predictions.v, sWord_predictions.l[[i]])
}
sWord_predictions.l[[1]]
sWord_predictions.l[[2]]
sWord_predictions.l[[3]]
errormatrix(testing.classes.v, sWord.predictions.v)
training.classes
errormatrix(testing.classes.v, sWord.predictions.v)
testing.classes
errormatrix(testing.classes.l[[1]], sWord_predictions.l[[1]])
errormatrix(testing.classes.l, sWord_predictions.l)
matrix (sword.predictions.v, nrow=3, byrow=T)
matrix (sWord.predictions.v, nrow=3, byrow=T)
matrix (1:12, nrow=1, byrow=T)
matrix (1:12, nrow=1, byrow=T) -> m
errormatrix(testing.classes.l[[1]], sWord_predictions.l[[1]])
errormatrix(testing.classes.l[[1]], sWord_predictions.l[[1]]) -> m2
str(m2)
m <- matrix (1:13, nrow=1, byrow=T)
str (m)
rbind (m, m2)
testing.classes.l <- list()
sWord_predictions.l <- list()
sWord_predictions_raw.l <- list()
index.record.v <- NULL
testing.classes.v <-NULL
sWord.predictions.v <-NULL
m <- matrix (1:13, nrow=1, byrow=T)
m <- matrix (1:13, nrow=1, byrow=T)
m
for (i in i:100) {
#create vector of random integers = 10% of obs in smaller.df
testing.index.v <- sample (seq (1, nrow(smaller.df)), 28)
#create training and testing data matrices using testing.index.v and its inverse
testing.data <- smaller.df[testing.index.v, ]
training.data <- smaller.df[-testing.index.v, ]
#create vectors of factors giving classes (here = authors) of each row in testing.data and training.data
training.classes <- as.factor(author.v[-testing.index.v])
testing.classes <- as.factor(author.v[testing.index.v])
#train the algorithm using training.data and training classes
sWord_classifier <- naiveBayes(training.data, training.classes)
# test the algorithm by using sWord_classifier to predict() the testing.data
sWord_predictions <- predict(sWord_classifier, testing.data)
sWord_predictions.l[[i]] <- sWord_predictions
# make a file of the raw probabilities
sWord_predictions_raw.l[[i]] <- predict(sWord_classifier, testing.data, type = "raw")
#make record of index vectors so we can identify the particular chunks
index.record.v <- append(index.record.v, testing.index.v)
#make record of testing_classes
testing.classes.l[[i]] <-testing.classes
#make vector of testing.classes for input to errormatrix()
testing.classes.v <-append(testing.classes.v, testing.classes)
#make vector of sWord.predictions for input to errormatrix()
sWord.predictions.v <- append(sWord.predictions.v, sWord_predictions.l[[i]])
#make error matrix for each iteration and combine them
err.matrix <- errormatrix(testing.classes, sWord_predictions)
combined.m <- rbind(m, err.matrix)
}
write.csv (combined.m, file="sWord_output/error_matrix1.csv")
my.apply(sWord_predictions.l)
as.data.frame()
as.data.frame(sWord_predictions.l[[1]])
sWord_predictions.l[[1]]
sWord_predictions.l[[5]]
sWord_predictions.l[[2]]
sWord_predictions.l[[3]]
str(sWord_predictions.l)
testing.classes.l <- list()
sWord_predictions.l <- list()
sWord_predictions_raw.l <- list()
index.record.v <- NULL
testing.classes.v <-NULL
sWord.predictions.v <-NULL
testing.index.v <- sample (seq (1, nrow(smaller.df)), 28)
testing.data <- smaller.df[testing.index.v, ]
training.data <- smaller.df[-testing.index.v, ]
training.classes <- as.factor(author.v[-testing.index.v])
testing.classes <- as.factor(author.v[testing.index.v])
sWord_classifier <- naiveBayes(training.data, training.classes)
sWord_predictions.l[[i]] <- predict(sWord_classifier, testing.data)
testing.classes.l <- list()
sWord_predictions.l <- list()
sWord_predictions_raw.l <- list()
index.record.v <- NULL
testing.classes.v <-NULL
sWord.predictions.v <-NULL
testing.index.v <- sample (seq (1, nrow(smaller.df)), 28)
testing.data <- smaller.df[testing.index.v, ]
training.data <- smaller.df[-testing.index.v, ]
training.classes <- as.factor(author.v[-testing.index.v])
testing.classes <- as.factor(author.v[testing.index.v])
sWord_classifier <- naiveBayes(training.data, training.classes)
sWord_predictions.l[[i]] <- predict(sWord_classifier, testing.data)
sWord_predictions_raw.l[[i]] <- predict(sWord_classifier, testing.data, type = "raw")
sWord_predictions.l[[i]] <- predict(sWord_classifier, testing.data)
sWord_predictions.l <- list()
sWord_predictions.l[[1]]
i <- 1
testing.classes.l <- list()
sWord_predictions.l <- list()
sWord_predictions_raw.l <- list()
index.record.v <- NULL
testing.classes.v <-NULL
sWord.predictions.v <-NULL
i <- 1
testing.index.v <- sample (seq (1, nrow(smaller.df)), 28)
testing.data <- smaller.df[testing.index.v, ]
training.data <- smaller.df[-testing.index.v, ]
training.classes <- as.factor(author.v[-testing.index.v])
testing.classes <- as.factor(author.v[testing.index.v])
sWord_classifier <- naiveBayes(training.data, training.classes)
sWord_predictions.l[[i]] <- predict(sWord_classifier, testing.data)
sWord_predictions_raw.l[[i]] <- predict(sWord_classifier, testing.data, type = "raw")
index.record.v <- append(index.record.v, testing.index.v)
testing.classes.l[[i]] <-testing.classes
sWord_predictions.l[[1]]
testing.classes.l <- list()
sWord_predictions.l <- list()
sWord_predictions_raw.l <- list()
index.record.v <- NULL
testing.classes.v <-NULL
sWord.predictions.v <-NULL
i <- 1
for (i in i:100) {
#create vector of random integers = 10% of obs in smaller.df
testing.index.v <- sample (seq (1, nrow(smaller.df)), 28)
#create training and testing data matrices using testing.index.v and its inverse
testing.data <- smaller.df[testing.index.v, ]
training.data <- smaller.df[-testing.index.v, ]
#create vectors of factors giving classes (here = authors) of each row in testing.data and training.data
training.classes <- as.factor(author.v[-testing.index.v])
testing.classes <- as.factor(author.v[testing.index.v])
#train the algorithm using training.data and training classes
sWord_classifier <- naiveBayes(training.data, training.classes)
# test the algorithm by using sWord_classifier to predict() the testing.data
sWord_predictions.l[[i]] <- predict(sWord_classifier, testing.data)
# make a file of the raw probabilities
sWord_predictions_raw.l[[i]] <- predict(sWord_classifier, testing.data, type = "raw")
#make record of index vectors so we can identify the particular chunks
index.record.v <- append(index.record.v, testing.index.v)
#make record of testing_classes
testing.classes.l[[i]] <-testing.classes
}
sWord_prediction.l[[2]]
sWord_predictions.l[[2]]
sWord_predictions.l[[2]][1,3]
sWord_predictions.l[[2]][4]
errormatrix(testing.classes.l[[3]], sWord_predictions.l[[3]] )
testing.classes.l <- list()
sWord_predictions.l <- list()
sWord_predictions_raw.l <- list()
index.record.v <- NULL
err.matr.l <- list()
i <- 1
for (i in i:100) {
#create vector of random integers = 10% of obs in smaller.df
testing.index.v <- sample (seq (1, nrow(smaller.df)), 28)
#create training and testing data matrices using testing.index.v and its inverse
testing.data <- smaller.df[testing.index.v, ]
training.data <- smaller.df[-testing.index.v, ]
#create vectors of factors giving classes (here = authors) of each row in testing.data and training.data
training.classes <- as.factor(author.v[-testing.index.v])
testing.classes <- as.factor(author.v[testing.index.v])
#train the algorithm using training.data and training classes
sWord_classifier <- naiveBayes(training.data, training.classes)
# test the algorithm by using sWord_classifier to predict() the testing.data
#store results in list object
sWord_predictions.l[[i]] <- predict(sWord_classifier, testing.data)
# make a file of the raw probabilities
sWord_predictions_raw.l[[i]] <- predict(sWord_classifier, testing.data, type = "raw")
#make record of index vectors so we can identify the particular chunks
index.record.v <- append(index.record.v, testing.index.v)
#make record of testing_classes
testing.classes.l[[i]] <-testing.classes
#make list of error matrices
err.matr.l[[i]] <- errormatrix(testing.classes.l[[i]], sWord_predictions.l[[i]])
}
err.mart.l[[3]]
err.matr.l[[3]]
err.matr.l[[3]][3,3]
b <- rbind(err.matr.l[[1]], err.matr.l[[2]])
save(testing.classes.l, file="saved_objects/")
b
rownames(b)
which(rownames(b)=="SUM")
which(rownames(b)="SUM")
which(rownames(b)=="-SUM-")
c <- do.call (rbind, err.matr.l)
dim (c)
a <- do.call(rbind, err.matr.l)
write.csv(a, file="Rresults/Naive_Bayes_predictions/error_matrix.csv")
class(sWord_predictions.l[[1]])
sWord_predictions.l[[1]]
data.frame(ID=seq_along(sWord_predictions.l[[1]]), sWord_predictions.l[[1]],)
data.frame(ID=seq_along(sWord_predictions.l[[1]]), sWord_predictions.l[[1]],SIMPLIFY=FALSE,
MoreArgs=list(stringsAsFactors=FALSE))
data.frame(sWord_predictions.l[[1]])
a <- data.frame(sWord_predictions.l[[1]])
dim(a)
dim(a)
my.list <- mapply(data.frame, sWord_predictions.l)
str(my.list)
a <- do.call (rbind, my.list)
a
a <- data.frame(sWord_predictions.l[[1]])
a
b <- data.frame(sWord_predictions.l[[2]])
dim(a)
c <- rbind(a,b)
my.list[[1]]
a[1,1:5]
a
my.list[[1]]
a <- do.call (rbind, my.list)
a
my.list[[1]]
a[1,1:5]
write.csv (a, file="Rresults/Naive_Bayes_predictions/predictions_made.csv")
my.list <- mapply(data.frame, sWord_predictions_raw.l)
a <- do.call (rbind, my.list)
write.csv (a, file="Rresults/Naive_Bayes_predictions/raw_predictions_made.csv")
my.list <- mapply(data.frame, testing.classes.l)
a <- do.call (rbind, my.list)
write.csv (a, file="Rresults/Naive_Bayes_predictions/right_answers.csv")
