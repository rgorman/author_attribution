(45-18)/45
55*.6
(100-64)/100
.36*45
16.2+33
andrews <-null
andrews <- NULL
((45-18)/45)
(((45-18)/45)*.55)
(((45-18)/45)*55)
(((45-18)/45)*55)+(36/100)
(((45-18)/45)*55)+((36/100)*45)
andrews <-(((45-18)/45)*55)+((36/100)*45)
25/45*55
(25/45*55)
(25/45*55)+(.69*45)
(.69*45)
34/45
34/45*55
.63*45
28.38+41.55
45-11
34+63/145
(34+63)/145
(25/45)
(25/45)*45
sample(100)
rep(0.01, 100)
x <- rep(.01, 100)
x[100] <- .99
x[99:100]
y <- 1:100
sample(x, 20, prob=y)
sample(y, 20, prob=x)
sample(y, 20, replace=T prob=x)
sample(y, 20, replace=TRUE prob=x)
sample(y, 20, replace=TRUE prob=x)
sample(y, 20, replace=TRUE, prob=x)
setwd("C:/rGorman/author_attribution/R_files")
library(XML)
source("code/corpusFunctions.R")
input.dir <- "sWord_input/rel_file"
files.v <- dir(path=input.dir, pattern=".*xml")
book.freqs.l <- list()
for(i in 1:length(files.v)){
doc.object <- xmlTreeParse(file.path(input.dir, files.v[i]), useInternalNodes=TRUE)
chunk.data.l <- getSwordChunkMaster(doc.object, 2000)
book.freqs.l[[files.v[i]]] <-chunk.data.l
}
summary(book.freqs.l)
freqs.l <- lapply(book.freqs.l, my.apply)
freqs.df <- do.call(rbind, freqs.l)
dim(freqs.df)
bookids.v <- gsub(".xml.\\d+", "", rownames(freqs.df))
freqs.df$ID[1:10]
book.chunk.ids <- paste(bookids.v, freqs.df$ID, sep="_")
freqs.df$ID <- book.chunk.ids
head(freqs.df)
result.t <- xtabs(Freq ~ ID+Var1, data=freqs.df)
final.df <- as.data.frame.matrix(result.t)
dim(final.df)
author.v <- gsub("_.+", "", rownames(final.df))
author.v[100:110]
head(author.v)
unique(author.v)
freq.means.v <- colMeans(final.df[, ])
keepers.v <- which(freq.means.v >=.001)
keepers.v[1:10]
smaller.df <- final.df[, keepers.v]
dim(smaller.df)
prob.m <- read.csv (file="Rresults/Naive_Bayes_predictions/chunkSize2000/chunk_parameters2.csv")
library(e1071)
library (gmodels)
library(klaR)
testing.classes.l <- list()
sWord_predictions.l <- list()
sWord_predictions_raw.l <- list()
index.record.v <- NULL
err.matr.l <- list()
sW.classifier.l <- list()
i <- 1
testing.index.v <- sample (seq (1, nrow(smaller.df)), 28, prob=prob.m$prob)
testing.data <- smaller.df[testing.index.v, ]
training.data <- smaller.df[-testing.index.v, ]
training.classes <- as.factor(author.v[-testing.index.v])
testing.classes <- as.factor(author.v[testing.index.v])
sWord_classifier <- naiveBayes(training.data, training.classes)
str (sWord_classifier)
sWord_classifier[[1]]
sWord_classifier[[2]]
sWord_classifier[[2]][1]
sWord_classifier[[2]][2]
source("code/corpusFunctions.R")
input.dir <- "sWord_input/rel_file"
files.v <- dir(path=input.dir, pattern=".*xml")
book.freqs.l <- list()
for(i in 1:length(files.v)){
doc.object <- xmlTreeParse(file.path(input.dir, files.v[i]), useInternalNodes=TRUE)
chunk.data.l <- getSwordChunkMaster(doc.object, 2000)
book.freqs.l[[files.v[i]]] <-chunk.data.l
}
summary(book.freqs.l)
freqs.l <- lapply(book.freqs.l, my.apply)
summary(freqs.l)
freqs.df <- do.call(rbind, freqs.l)
dim(freqs.df)
head(freqs.df)
bookids.v <- gsub(".xml.\\d+", "", rownames(freqs.df))
bookids.v[1:20]
freqs.df$ID[1:10]
book.chunk.ids <- paste(bookids.v, freqs.df$ID, sep="_")
book.chunk.ids[1:20]
freqs.df$ID <- book.chunk.ids
head(freqs.df)
result.t <- xtabs(Freq ~ ID+Var1, data=freqs.df)
dim(result.t)
final.df <- as.data.frame.matrix(result.t)
dim(final.df)
author.v <- gsub("_.+", "", rownames(final.df))
unique(author.v)
freq.means.v <- colMeans(final.df[, ])
keepers.v <- which(freq.means.v >=.001)
smaller.df <- final.df[, keepers.v]
write.csv(smaller.df, file="Rresults/Naive_Bayes_predicitons/chunkSize2000/2000_sWord_chunks.csv")
dim(smaller.df)
prob.m <- read.csv (file="Rresults/Naive_Bayes_predictions/chunkSize2000/chunk_parameters2.csv")
library(e1071)
library (gmodels)
library(klaR)
testing.classes.l <- list()
sWord_predictions.l <- list()
sWord_predictions_raw.l <- list()
index.record.v <- NULL
err.matr.l <- list()
sW.classifier.l <- list()
i <- 1
for (i in i:100) {
#create vector of random integers = 10% of obs in smaller.df
testing.index.v <- sample (seq (1, nrow(smaller.df)), 28, prob=prob.m$prob)
#create training and testing data matrices using testing.index.v and its inverse
testing.data <- smaller.df[testing.index.v, ]
training.data <- smaller.df[-testing.index.v, ]
#create vectors of factors giving classes (here = authors) of each row in testing.data and training.data
training.classes <- as.factor(author.v[-testing.index.v])
testing.classes <- as.factor(author.v[testing.index.v])
#train the algorithm using training.data and training classes
sWord_classifier <- naiveBayes(training.data, training.classes)
# test the algorithm by using sWord_classifier to predict() the testing.data
#store results in list object
sWord_predictions.l[[i]] <- predict(sWord_classifier, testing.data)
# make a file of the raw probabilities
sWord_predictions_raw.l[[i]] <- predict(sWord_classifier, testing.data, type = "raw")
#make record of index vectors so we can identify the particular chunks
index.record.v <- append(index.record.v, testing.index.v)
#make record of testing_classes
testing.classes.l[[i]] <-testing.classes
#make list of error matrices
err.matr.l[[i]] <- errormatrix(testing.classes.l[[i]], sWord_predictions.l[[i]])
#collect the sWord_classifier objects
sW.classifier.l[[i]] <- sWord_classifier
}
a <- do.call(rbind, err.matr.l)
write.csv(a, file="Rresults/Naive_Bayes_predictions/error_matrix.csv")
my.list <- mapply(data.frame, sWord_predictions.l)
b <- do.call (rbind, my.list)
write.csv (b, file="Rresults/Naive_Bayes_predictions/predictions_made.csv")
my.list <- mapply(data.frame, sWord_predictions_raw.l)
c <- do.call (rbind, my.list)
my.list <- mapply(data.frame, sWord_predictions_raw.l)
c <- do.call (rbind, my.list)
my.list <- mapply(data.frame, testing.classes.l)
d <- do.call (rbind, my.list)
write.csv (d, file="Rresults/Naive_Bayes_predictions/right_answers.csv")
save(sW.classifier.l, file="Rresults/Naive_Bayes_predictions/list_of_classifiers.R")
str (c)
c
my.list <- mapply(data.frame, sWord_predictions_raw.l)
str(my.list)
str (my.list)
sword_predictions_raw.l[[1]]
sWord_predictions_raw.l[[1]]
sWord_predictions_raw.l[[2]]
save(sWord_predictions_raw.l, file="Rresults/Naive_Bayes_predictions/rawPredictions.R"
)
save(sWord_predictions_raw.l, file="Rresults/Naive_Bayes_predictions/rawPredictions.R")
sWord_predictions_raw.l[[3]]
sWord_predictions_raw.l[[4]]
sWord_predictions_raw.l[[5]]
sW.classifier.l[[5]]
sW.classifier.l[[2]]
my.list <- mapply(data.frame, testing.classes.l)
d <- do.call (rbind, my.list)
head(d)
levs <- levels(sWord_predictions.l[[11]])
pred.author.l <- list()
i <- 1
for (i in i:100) {
levs <- levels(sWord_predictions.l[[i]])
pred.author.l[[i]] <- levs[a[i,]]
}
pred.author.t <- do.call(rbind, pred.author.l)
pred.author.l[[1]]
str(pred.author.l)
d
testing.classes.l[[1]]
testing.classes.l[[5]]
testing.classes.l[[2]]
