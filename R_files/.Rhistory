(45-18)/45
55*.6
(100-64)/100
.36*45
16.2+33
andrews <-null
andrews <- NULL
((45-18)/45)
(((45-18)/45)*.55)
(((45-18)/45)*55)
(((45-18)/45)*55)+(36/100)
(((45-18)/45)*55)+((36/100)*45)
andrews <-(((45-18)/45)*55)+((36/100)*45)
25/45*55
(25/45*55)
(25/45*55)+(.69*45)
(.69*45)
34/45
34/45*55
.63*45
28.38+41.55
45-11
34+63/145
(34+63)/145
(25/45)
(25/45)*45
sample(100)
rep(0.01, 100)
x <- rep(.01, 100)
x[100] <- .99
x[99:100]
y <- 1:100
sample(x, 20, prob=y)
sample(y, 20, prob=x)
sample(y, 20, replace=T prob=x)
sample(y, 20, replace=TRUE prob=x)
sample(y, 20, replace=TRUE prob=x)
sample(y, 20, replace=TRUE, prob=x)
setwd("C:/rGorman/author_attribution/R_files")
(aeschy <- x/25)
x <- 1/13
(aeschy <- x/25)
(athen <- x/22)
o
(diod <- x/13)
(hdt <- x/16)
(hesiod <- x /10)
(iliad <- x/74)
(lysias <- x/6)
(odyssey <- x/44)
(plato <- x/3)
(plut <- x/11)
(plyb <- x/14)
(soph <- x/27)
(thuc <- x/12)
library(XML)
source("code/corpusFunctions.R")
input.dir <- "sWord_input/rel_file"
files.v <- dir(path=input.dir, pattern=".*xml")
book.freqs.l <- list()
for(i in 1:length(files.v)){
doc.object <- xmlTreeParse(file.path(input.dir, files.v[i]), useInternalNodes=TRUE)
chunk.data.l <- getSwordChunkMaster(doc.object, 2000)
book.freqs.l[[files.v[i]]] <-chunk.data.l
}
summary(book.freqs.l)
freqs.l <- lapply(book.freqs.l, my.apply)
freqs.df <- do.call(rbind, freqs.l)
dim(freqs.df)
head(freqs.df)
bookids.v <- gsub(".xml.\\d+", "", rownames(freqs.df))
bookids.v[1:20]
freqs.df$ID[1:10]
book.chunk.ids <- paste(bookids.v, freqs.df$ID, sep="_")
book.chunk.ids[1:20]
freqs.df$ID <- book.chunk.ids
head(freqs.df)
result.t <- xtabs(Freq ~ ID+Var1, data=freqs.df)
dim(result.t)
final.df <- as.data.frame.matrix(result.t)
dim(final.df)
author.v <- gsub("_.+", "", rownames(final.df))
author.v[100:110]
head(author.v)
unique(author.v)
author.v
prob.m <- read.csv (file="Rresults/Naive_Bayes_predictions/chunkSize2000/chunk_parameters2.csv")
names(prob.m)
library(e1071)
library (gmodels)
install.packages("gmodels")
library (gmodels)
library(klaR)
install.packages("klaR")
library(klaR)
testing.classes.l <- list()
sWord_predictions.l <- list()
sWord_predictions_raw.l <- list()
index.record.v <- NULL
err.matr.l <- list()
sW.classifier.l <- list()
i <- 1
freq.means.v <- colMeans(final.df[, ])
keepers.v <- which(freq.means.v >=.001)
keepers.v[1:10]
smaller.df <- final.df[, keepers.v]
dim(smaller.df)
testing.index.v <- sample (seq (1, nrow(smaller.df)), 28, prob=prob.m$prob)
testing.data <- smaller.df[testing.index.v, ]
training.data <- smaller.df[-testing.index.v, ]
training.classes <- as.factor(author.v[-testing.index.v])
testing.classes <- as.factor(author.v[testing.index.v])
sWord_classifier <- naiveBayes(training.data, training.classes)
sWord_predictions.l[[i]] <- predict(sWord_classifier, testing.data)
sWord_predictions_raw.l[[i]] <- predict(sWord_classifier, testing.data, type = "raw")
index.record.v <- append(index.record.v, testing.index.v)
testing.classes.l[[i]] <-testing.classes
err.matr.l[[i]] <- errormatrix(testing.classes.l[[i]], sWord_predictions.l[[i]])
sW.classifier.l[[i]] <- sWord_classifier
sWord_predictions.l[[1]]
err.matr.l[[1]]
