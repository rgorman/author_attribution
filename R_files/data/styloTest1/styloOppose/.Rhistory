x
x <- xtabs(~ rbinom(s, n, p))/s
x
plot(as.numeric(names(x),x type ="h"))
plot(as.numeric(names(x),x, type ="h"))
plot(as.numeric(names(x),x, type ="h", xlim =c(0, 30)))
plot(as.numeric(names(x),x, type ="h", xlim =c(0, 30), xlac + "frequency"))
plot(as.numeric(names(x),x, type ="h", xlim =c(0, 30), xlab + "frequency"))
plot(as.numeric(names(x),x, type ="h", xlim =c(0, 30), xlab = "frequency"))
plot(as.numeric(names(x),x, type ="h", xlim =c(0, 30), xlab = "frequency", ylab = "sample probabbility"))
plot(as.numeric(names(x)),x, type ="h", xlim =c(0, 30), xlab = "frequency", ylab = "sample probabbility"))
plot(as.numeric(names(x)),x, type ="h", xlim =c(0, 30), xlab = "frequency", ylab = "sample probabbility")
havelaar
p <- havelaar$Frequency/n
qnts <- seq(.005, .995, by = .01)
plot (qbinom(qnts, n, p))
plot (qbinom(qnts, n, p), quantile(havelaar$Frequency, qnts))
qbinom(qnts, n, p)
quantile(havelaar$Frequency, qnts)
mean (havellar$Frequency)
mean (havelaar$Frequency)
mean (havelaar$Frequency / n)
mean (havelaar$Frequency)/ n
pbinom(4, 10, .5)
pbinom(5, 10, .5)
dbinom (1, 10, .5)
dbinom (1, 10, .5) + dbinom (2, 10, .5)
dbinom (1, 10, .5) + dbinom (2, 10, .5) + dbinom (3, 10, .5)
dbinom (1, 10, .5) + dbinom (2, 10, .5) + dbinom (3, 10, .5) + dbinom (4, 10, .5)
dbinom (1, 10, .5) + dbinom (2, 10, .5) + dbinom (3, 10, .5) + dbinom (4, 10, .5) + dbinom (0, 10, .5)
dbinom (1, 10, .5) + dbinom (2, 10, .5) + dbinom (3, 10, .5) + dbinom (4, 10, .5) + dbinom (0, 10, .5) + dbinom (5, 10, .5)
qbinom(.5, 10, .5)
qbinom(.25, 10, .5)
qbinom(.37, 10, .5)
qbinom(.38, 10, .5)
mean (havelaar$Frequency)/ n
qbinom (13, n, .01338)
qbinom (13, 1000, .01338)
pbinom (13, 1000, .01338)
pbinom (21, 1000, .01338)
dbinom (21, 1000, .01338)
dbinom (13, 1000, .01338)
dbinom (30, 1000, .01338)
pbinom (30, 1000, .01338)
qbinom(.38, 10, .5)
qbinom(.38, n, .5)
qbinom(.1, n, .5)
qbinom(.01, n, .5)
mean (havelaar$Frequency)/ n
qbinom(.01, n, .1338384)
qbinom(.02, n, .1338384)
qbinom(.92, n, .1338384)
qbinom(.992, n, .1338384)
qbinom(.992, 1000, .1338384)
qbinom(.992, 10000, .1338384)
qbinom(.992, 100000, .1338384)
qbinom(.992, 100000000, .1338384)
qbinom(.95, 100000000, .1338384)
qbinom(.95, 1000, .1338384)
pbinom (152, 1000, .01338)
qbinom(qnts, 1000, .01338)
quantile(havelaar$Frequency, qnts)
plot (qbinom(qnts, n, .01338), quantile(havelaar$Frequency. qnts))
plot (qbinom(qnts, n, .01338), quantile(havelaar$Frequency, qnts))
plot (qbinom(qnts, n, .01338))
plot (quantile(havelaar$Frequency, qnts))
plot (qbinom(qnts, n, .01338))
plot (qbinom(qnts, n, .01338), quantile(havelaar$Frequency, qnts))
dpois(10, 58856)
dpois(1000, 58856)
dpois(57000, 58856)
dpois(58000, 58856)
dpois(58800, 58856)
plot (dpois(58800, 58856))
havelaar.tab <- xtabs(~ havelaar$Frequency)
havelaar.tab
havelaar.probs <- xtabs(~ havelaar$Frequency)/ nrow(havelaar)
havelaar.probs
havelaar.probs <- xtabs(~ havelaar$Frequency)/ nrow(havelaar) round(havelaar.probs, 3)
havelaar.probs <- xtabs(~ havelaar$Frequency)/ nrow(havelaar) )
havelaar.probs <- xtabs(~ havelaar$Frequency)/ nrow(havelaar)
round (havelaar.probs, 3)
havelaar.probs <- round (havelaar.probs, 3)
sum (havelaar.probs)
plot(as.numeric(names(havelaar.probs)))
plot(as.numeric(names(havelaar.probs)), havelaar.probs)
havelaar.probs <- xtabs(~ havelaar$Frequency)/ nrow(havelaar)
sum (havelaar.probs)
plot(as.numeric(names(havelaar.probs)), havelaar.probs)
plot(as.numeric(names(havelaar.probs)), havelaar.probs, xlim=c(0, 40))
plot(as.numeric(names(havelaar.probs)), havelaar.probs, xlim=c(0, 40), type = "h")
plot (counts)
counts <- 0:42
plot (counts)
plot (counts, dbinom (counts, 1000, .0134))
plot (counts, dbinom (counts, 1000, .0134) type = "h")
plot (counts, dbinom (counts, 1000, .0134), type = "h")
lambda <- 1000*.0134
plot (dpois(counts, lambda))
plot (dpois(counts, lambda), type = "h")
x <- seq(-4, 4, 0.1)
y <- dnorm(x)
plot (x, y)
plot (x, y, xlab="x", ylab="density", ylim = c(0, 0.8), type ="l")
pt(-3, 2)
pt(-3, 20)
27269 %% 40
27240/40
alice [1:10]
alice <- tolower(alice)
wonderland <- data.frame(word = alice[1:27240], chunk = cut (1:27240, breaks 40, labels = F))
wonderland <- data.frame(word = alice[1:27240], chunk = cut (1:27240, breaks = 40, labels = F))
wonderland [1:5,]
wonderland$alice <- wonderland$word == "alice"
wonderland [1:5,]
wonderland$hare <- wonderland$word == "hare"
wonderland$very <- wonderland$word == "very"
wonderland [1:5,]
sum (wonderland$alice)
countOfAlice <- tapply (wonderland$alice, wonderland$chunk, sum)
countOfAlice
countOfAlice.tab <- xtabs(~ countOfAlice)
countOfAlice.tab
countOfHare <-tapply(wonderland$hare, wonderland$chunk, sum)
countOfHare.tab <- xtabs(~ countOfHare)
countOfVery <- tapply (wonderland$very, wonderland$chunk, sum)
countOfVery.tab <- xtabs(~ countOfVery)
plot(countOfAlice.tab)
plot (countOfAlice)
plot (countOfAlice, type = "l")
plot (countOfAlice, type = "h")
plot (countOfHare, type = "h")
plot (countOfvery, type = "h")
plot (countOfVery, type = "h")
countOfAlice
countOfAlice.tab
tappy(countOfAlice.tab, sum)
tapply(countOfAlice.tab, sum)
sum(countOfAlice.tab)
aggregate(countOfAlice.tab, /40)
aggregate(countOfAlice.tab)/40
tapply(countOfAlice, sum)
tapply(as.numeric(names(countOfAlice)), sum)
plot (as.numeric(names(countOfAlice.tab)))
plot (as.numeric(names(countOfAlice.tab)), countOfAlice.tab/sum(countOfAlice.tab))
plot (as.numeric(names(countOfAlice.tab)), countOfAlice.tab/sum(countOfAlice.tab), type = "h", xlim = c(0,18, ylim = c(0,9)))
plot (as.numeric(names(countOfAlice.tab)), countOfAlice.tab/sum(countOfAlice.tab), type = "h", xlim = c(0,18), ylim = c(0,9)))
plot (as.numeric(names(countOfAlice.tab)), countOfAlice.tab/sum(countOfAlice.tab), type = "h", xlim = c(0,18), ylim = c(0,9))
plot (as.numeric(names(countOfAlice.tab)), countOfAlice.tab/40), type = "h", xlim = c(0,18), ylim = c(0,9))
plot (as.numeric(names(countOfAlice.tab)), countOfAlice.tab/40, type = "h", xlim = c(0,18), ylim = c(0,9))
plot (as.numeric(names(countOfAlice.tab)), countOfAlice.tab/40, type = "h", xlim = c(0,18), ylim = c(0, .09))
plot (as.numeric(names(countOfAlice.tab)), countOfAlice.tab/40, type = "h", xlim = c(0,18), ylim = c(0, .5))
plot (as.numeric(names(countOfAlice.tab)), countOfAlice.tab/40, type = "h", xlim = c(0,18), ylim = c(0, 0.5))
density(ver)
density(ver$Frequency)
plot(density(ver$Frequency)
plot(density(ver$Frequency))
plot(density(ver$Ferquency))
plot(density(ver$Frequency))
head (ver)
ver$Frequency <- log(ver$Frequency)
plot(density(ver$Frequency))
log(255)
log (-.5)
exp (-.5)
qqnorm(rnorm(length(ver$Frequency), 4, 3))
abline(v+ qnorm(.025), col = "grey")
abline(v= qnorm(.025), col = "grey")
abline (h= qnorm(.025, 4, 3)col = "grey")
abline(h = qnorm(.025, 4, 3), col = "grey")
head(Ont)
head(durationsOnt)
head(ver)
ver.transp <- ver[ver$SemanticClass == "transparent",]$Frequency
head(ver.transp)
ver.opaque <- ver[ver$SemanticClass == "opaque",]$Frequency
ver.transp.d <- density(ver.transp)
ver.opaque.d <- density(ver.opaque)
ver.transp.d <- density(ver.transp)
ver.opaque.d <- density(ver.opaque)
xlimit = range(ver.trasp.d$x, ver.opaque.d$x)
ylimit = range(ver.transp.d$y, ver.opaque.d$y)
plot(ver.transp.d, lty=1, col ="black", xlab="ferquency", ylab="density", xlim = xlimit, main="")
lines(ver.opaque.d, col = "darkgrey")
ver.transp.d <- density(ver.transp)
ver.opaque.d <- density(ver.opaque)
xlimit = range(ver.trasp.d$x, ver.opaque.d$x)
xlimit = range(ver.transp.d$x, ver.opaque.d$x)
ylimit = range(ver.transp.d$y, ver.opaque.d$y)
plot(ver.transp.d, lty=1, col ="black", xlab="ferquency", ylab="density", xlim = xlimit, main="")
lines(ver.opaque.d, col = "darkgrey")
ks.test(jitter(ver.transp), jitter(ver.opaque))
bwplot(Frequency ~ Class | Complex, data=ratings)
library(lattice)
bwplot(Frequency ~ Class | Complex, data=ratings)
q
q()
library(XML)
source("code/corpusFunctions.R")
input.dir <- "data/relationPosFiles"
files.v <- dir(path=input.dir, pattern=".*xml")
input.dir
setwd("C:/data/Bob/TextAnalysisInR/TextAnalysisWithR")
library(XML)
library(stylo)
source("code/corpusFunctions.R")
input.dir <- "data/processForStylo"
files.v <- dir(path=input.dir, pattern=".*xml")
input.dir <- "data/preprocessForStylo"
files.v <- dir(path=input.dir, pattern=".*xml")
doc.object <- xmlTreeParse(file.path(input.dir, files.v[1]), useInternalNodes=TRUE)
summary(doc.object)
doc.object$nameCounts
metaData.l <- list()
metadata[[1]] < summary(doc.object)
metaData.l[[1]] < summary(doc.object)
metaData.l < summary(doc.object)
sword.content <- paste(sapply(swords, xmlValue), Collapse = NULL)
swords <-getNodeSet(doc.object, "//sword", )
sword.content <- paste(sapply(swords, xmlValue), Collapse = NULL)
sword.content <- tolower(sword.content)
no.star <-gsub("*", "", sword.content)
no.star <-gsub("*", "-", sword.content)
no.star <-gsub("/*", "-", sword.content)
no.star <-gsub("\*", "-", sword.content)
no.star <-gsub("[\*]", "-", sword.content)
no.star <-gsub(\*, "-", sword.content)
grep("\*", sword.content)
grep(\"*", sword.content)
grep("*", sword.content, fixed=TRUE)
no.star <-gsub(*, "-", sword.content, fixed=TRUE)
no.star <-gsub("*", "-", sword.content, fixed=TRUE)
no.underscore <-gsub("_", "", no.star, fixed=TRUE)
root <- gsub("#", "root", no.underscore, fixed=TRUE)
root <- gsub("#", "-root", no.underscore, fixed=TRUE)
root[1:100]
no.underscore <-gsub("_", "-", no.star, fixed=TRUE)
root <- gsub("#", "-root", no.underscore, fixed=TRUE)
root <- gsub("#", "-root", no.underscore, fixed=TRUE)
root[1:100]
cat(root, file="data/postprocessForStylo/test1.txt", sep=" ")
file.name <- files.v[1]
file.name <- gsub(".rel.xml", "" file.name, fixed=TRUE)
file.name <- gsub(".rel.xml", "", file.name, fixed=TRUE)
file.name <- gsub(".", "_", file.name, fixed=TRUE)
file.name <- append(file.name, ".txt")
file.name <- paste(file.name, ".txt")
file.name <- gsub(".", "_", file.name, fixed=TRUE)
file.name <- files.v[1]
file.name <- gsub(".rel.xml", "", file.name, fixed=TRUE)
file.name <- gsub(".", "_", file.name, fixed=TRUE)
file.name <- paste(file.name, ".txt")
file.name <- files.v[1]
file.name <- gsub(".rel.xml", "", file.name, fixed=TRUE)
file.name <- gsub(".", "_", file.name, fixed=TRUE)
file.name <- paste(file.name, ".txt" sep=NULL)
file.name <- paste(file.name, ".txt", sep=NULL)
file.name <- append(file.name, ".txt", sep=NULL)
file.name <- paste(file.name, ".txt", sep=".")
file.name <- files.v[1]
file.name <- gsub(".rel.xml", "", file.name, fixed=TRUE)
file.name <- gsub(".", "_", file.name, fixed=TRUE)
file.name <- paste(file.name, "txt", sep=".")
c("path/", file.name)
path <- c("data/postprocessForStylo")
output.file <- paste(path, file.name, sep=/)
output.file <- paste(path, file.name, sep="/")
cat(root, file=output.file, sep=" ")
setwd("C:/data/Bob/TextAnalysisInR/TextAnalysisWithR")
library(XML)
library(stylo)
source("code/corpusFunctions.R")
input.dir <- "data/preprocessForStylo"
files.v <- dir(path=input.dir, pattern=".*xml")
for (i in 1:length(files.v)) {
#read xml files into doc.object
doc.object <- xmlTreeParse(file.path(input.dir, files.v[i]), useInternalNodes=TRUE)
# extract swords from doc.object
swords <-getNodeSet(doc.object, "//sword", )
# extract content of <sword> elements and paste into object
sword.content <- paste(sapply(swords, xmlValue), Collapse = NULL)
# convert to lower case
sword.content <- tolower(sword.content)
#eliminate the star, underscore, and hash-tag symbols which bother stylo; replace with hyphon
no.star <-gsub("*", "-", sword.content, fixed=TRUE)
no.underscore <-gsub("_", "-", no.star, fixed=TRUE)
root <- gsub("#", "-root", no.underscore, fixed=TRUE)
#create new file name for out put; new name is compatible with stylo
file.name <- files.v[i]
file.name <- gsub(".rel.xml", "", file.name, fixed=TRUE)
file.name <- gsub(".", "_", file.name, fixed=TRUE)
file.name <- paste(file.name, "txt", sep=".")
# combine path and file name for writing to disk
path <- c("data/postprocessForStylo")
output.file <- paste(path, file.name, sep="/")
#write to disk
cat(root, file=output.file, sep=" ")
}
setwd("C:/data/Bob/TextAnalysisInR/TextAnalysisWithR/data/styloTest1")
library(stylo)
stylo()
stylo()
my.results <- stylo()
names (my.results)
rotated.t <- t(my.results$table.with.all.freqs)
dim(rotated.t)
write.csv(rotated.t, file="styloCluster1.csv")
input.dir <- "data/preprocessForStylo"
files.v <- dir(path=input.dir, pattern=".*xml")
setwd("C:/data/Bob/TextAnalysisInR")
input.dir <- "data/preprocessForStylo"
files.v <- dir(path=input.dir, pattern=".*xml")
setwd("C:/data/Bob/TextAnalysisInR/TextAnalysisWithR")
library(XML)
input.dir <- "data/preprocessForStylo"
files.v <- dir(path=input.dir, pattern=".*xml")
doc.object <- xmlTreeParse(file.path(input.dir, files.v[1]), useInternalNodes=TRUE)
swords <-getNodeSet(doc.object, "//sword", )
sword.content <- paste(sapply(swords, xmlValue), Collapse = NULL)
sword.content <- tolower(sword.content)
no.star <-gsub("*", "-", sword.content, fixed=TRUE)
no.underscore <-gsub("_", "-", no.star, fixed=TRUE)
root <- gsub("#", "-root", no.underscore, fixed=TRUE)
no.digits <- gsub("[:digit:]", "", root)
no.star <-gsub("*", "-", sword.content, fixed=TRUE)
no.underscore <-gsub("_", "-", no.star, fixed=TRUE)
root <- gsub("#", "-root", no.underscore, fixed=TRUE)
no.digits[1:10]
root <- gsub("#", "-root", no.underscore, fixed=TRUE)
no.digits <- gsub("\D", "", root)
no.digits <- gsub("\d", "", root)
setwd("C:/data/Bob/TextAnalysisInR/TextAnalysisWithR")
library(XML)
input.dir <- "data/preprocessForStylo"
files.v <- dir(path=input.dir, pattern=".*xml")
doc.object <- xmlTreeParse(file.path(input.dir, files.v[1]), useInternalNodes=TRUE)
swords <-getNodeSet(doc.object, "//sword", )
sword.content <- paste(sapply(swords, xmlValue), Collapse = NULL)
sword.content <- tolower(sword.content)
no.digits <- gsub("exd[1-9]", "exd", root)
no.star <-gsub("*", "-", sword.content, fixed=TRUE)
no.underscore <-gsub("_", "-", no.star, fixed=TRUE)
root <- gsub("#", "-root", no.underscore, fixed=TRUE)
no.digits <- gsub("exd[1-9]", "exd", root)
final <- gsub("exd", "exd-", no.digits)
setwd("C:/data/Bob/TextAnalysisInR/TextAnalysisWithR")
library(XML)
input.dir <- "data/preprocessForStylo"
files.v <- dir(path=input.dir, pattern=".*xml")
for (i in 1:length(files.v)) {
#read xml files into doc.object
doc.object <- xmlTreeParse(file.path(input.dir, files.v[i]), useInternalNodes=TRUE)
# extract swords from doc.object
swords <-getNodeSet(doc.object, "//sword", )
# extract content of <sword> elements and paste into object
sword.content <- paste(sapply(swords, xmlValue), Collapse = NULL)
# convert to lower case
sword.content <- tolower(sword.content)
#eliminate the star, underscore, and hash-tag symbols which bother stylo; replace with hyphon
no.star <-gsub("*", "-", sword.content, fixed=TRUE)
no.underscore <-gsub("_", "-", no.star, fixed=TRUE)
root <- gsub("#", "-root", no.underscore, fixed=TRUE)
no.digits <- gsub("exd[1-9]", "exd", root)
final <- gsub("exd", "exd-", no.digits)
#create new file name for out put; new name is compatible with stylo
file.name <- files.v[i]
file.name <- gsub(".rel.xml", "", file.name, fixed=TRUE)
file.name <- gsub(".", "_", file.name, fixed=TRUE)
file.name <- paste(file.name, "txt", sep=".")
# combine path and file name for writing to disk
path <- c("data/postprocessForStylo")
output.file <- paste(path, file.name, sep="/")
#write to disk
cat(final, file=output.file, sep=" ")
}
setwd("C:/data/Bob/TextAnalysisInR/TextAnalysisWithR")
library(XML)
input.dir <- "data/preprocessForStylo"
files.v <- dir(path=input.dir, pattern=".*xml")
for (i in 1:length(files.v)) {
#read xml files into doc.object
doc.object <- xmlTreeParse(file.path(input.dir, files.v[i]), useInternalNodes=TRUE)
# extract swords from doc.object
swords <-getNodeSet(doc.object, "//sword", )
# extract content of <sword> elements and paste into object
sword.content <- paste(sapply(swords, xmlValue), Collapse = NULL)
# convert to lower case
sword.content <- tolower(sword.content)
#eliminate the star, underscore, and hash-tag symbols which bother stylo; replace with hyphon
no.star <-gsub("*", "-", sword.content, fixed=TRUE)
no.underscore <-gsub("_", "-", no.star, fixed=TRUE)
root <- gsub("#", "-root", no.underscore, fixed=TRUE)
no.digits <- gsub("exd[0-9]", "exd", root)
final <- gsub("exd", "exd-", no.digits)
#create new file name for out put; new name is compatible with stylo
file.name <- files.v[i]
file.name <- gsub(".rel.xml", "", file.name, fixed=TRUE)
file.name <- gsub(".", "_", file.name, fixed=TRUE)
file.name <- paste(file.name, "txt", sep=".")
# combine path and file name for writing to disk
path <- c("data/postprocessForStylo")
output.file <- paste(path, file.name, sep="/")
#write to disk
cat(final, file=output.file, sep=" ")
}
setwd("C:/data/Bob/TextAnalysisInR/TextAnalysisWithR/data/styloTest1")
library(stylo)
my.results <- stylo()
setwd("C:/data/Bob/TextAnalysisInR/TextAnalysisWithR")
library(XML)
input.dir <- "data/preprocessForStylo"
files.v <- dir(path=input.dir, pattern=".*xml")
for (i in 1:length(files.v)) {
#read xml files into doc.object
doc.object <- xmlTreeParse(file.path(input.dir, files.v[i]), useInternalNodes=TRUE)
# extract swords from doc.object
swords <-getNodeSet(doc.object, "//sword", )
# extract content of <sword> elements and paste into object
sword.content <- paste(sapply(swords, xmlValue), Collapse = NULL)
# convert to lower case
sword.content <- tolower(sword.content)
#eliminate the star, underscore, and hash-tag symbols which bother stylo; replace with hyphon
no.star <-gsub("*", "-", sword.content, fixed=TRUE)
no.underscore <-gsub("_", "-", no.star, fixed=TRUE)
root <- gsub("#", "-root", no.underscore, fixed=TRUE)
no.digits <- gsub("exd[0-9]", "exd", root)
exd.hyphen <- gsub("exd", "exd-", no.digits)
final <- gsub("--", "-", exd.hyphen. fixed=TRUE)
#create new file name for out put; new name is compatible with stylo
file.name <- files.v[i]
file.name <- gsub(".rel.xml", "", file.name, fixed=TRUE)
file.name <- gsub(".", "_", file.name, fixed=TRUE)
file.name <- paste(file.name, "txt", sep=".")
# combine path and file name for writing to disk
path <- c("data/postprocessForStylo")
output.file <- paste(path, file.name, sep="/")
#write to disk
cat(final, file=output.file, sep=" ")
}
file.name <- files.v[1]
file.name <- gsub(".rel.xml", "", file.name, fixed=TRUE)
file.name <- gsub(".", "_", file.name, fixed=TRUE)
file.name <- paste(file.name, "txt", sep=".")
path <- c("data/postprocessForStylo")
output.file <- paste(path, file.name, sep="/")
cat(final, file=output.file, sep=" ")
final <- gsub("--", "-", exd.hyphen. fixed=TRUE)
final <- gsub("--", "-", exd.hyphen, fixed=TRUE)
final <- gsub("--", "-", exd.hyphen, fixed=TRUE)
setwd("C:/data/Bob/TextAnalysisInR/TextAnalysisWithR")
library(XML)
input.dir <- "data/preprocessForStylo"
files.v <- dir(path=input.dir, pattern=".*xml")
for (i in 1:length(files.v)) {
#read xml files into doc.object
doc.object <- xmlTreeParse(file.path(input.dir, files.v[i]), useInternalNodes=TRUE)
# extract swords from doc.object
swords <-getNodeSet(doc.object, "//sword", )
# extract content of <sword> elements and paste into object
sword.content <- paste(sapply(swords, xmlValue), Collapse = NULL)
# convert to lower case
sword.content <- tolower(sword.content)
#eliminate the star, underscore, and hash-tag symbols which bother stylo; replace with hyphon
no.star <-gsub("*", "-", sword.content, fixed=TRUE)
no.underscore <-gsub("_", "-", no.star, fixed=TRUE)
root <- gsub("#", "-root", no.underscore, fixed=TRUE)
no.digits <- gsub("exd[0-9]", "exd", root)
exd.hyphen <- gsub("exd", "exd-", no.digits)
final <- gsub("--", "-", exd.hyphen, fixed=TRUE)
#create new file name for out put; new name is compatible with stylo
file.name <- files.v[i]
file.name <- gsub(".rel.xml", "", file.name, fixed=TRUE)
file.name <- gsub(".", "_", file.name, fixed=TRUE)
file.name <- paste(file.name, "txt", sep=".")
# combine path and file name for writing to disk
path <- c("data/postprocessForStylo")
output.file <- paste(path, file.name, sep="/")
#write to disk
cat(final, file=output.file, sep=" ")
}
setwd("C:/data/Bob/TextAnalysisInR/TextAnalysisWithR/data/styloTest1")
library(stylo)
my.results <- stylo()
my.results <- stylo()
rotated.t <- t(my.results$table.with.all.freqs)
dim(rotated.t)
write.csv(rotated.t, file="styloCluster1.csv")
my.classify.results <-classify()
names(my.classify.results)
my.classify.results$success.rate
my.classify.results <-classify()
names(my.classify.results)
my.classify.results <-classify()
setwd("C:/data/Bob/TextAnalysisInR/TextAnalysisWithR/data/styloTest1/styloOppose")
oppose()
oppose()
oppose()
my.oppose.results <-oppose()
names.my.oppose.results
names(my.oppose.results)
my.oppose.results$summary.zeta.scores
my.oppose.results <-oppose()
my.oppose.results <-oppose()
my.oppose.results <-oppose()
my.oppose.results <-oppose()
my.oppose.results <-oppose()
my.oppose.results <-oppose()
my.oppose.results <-oppose()
my.oppose.results <-oppose()
my.oppose.results <-oppose()
my.oppose.results <-oppose()
my.oppose.results <-oppose()
